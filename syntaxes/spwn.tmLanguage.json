{
  "scopeName": "source.spwn",
  "name": "SPWN",
  "comment": "just a modified version of the grammar of Golang",
  "fileTypes": [
    "spwn"
  ],

  "patterns": [{
      "comment": "Block comments",
      "begin": "/\\*",
      "end": "\\*/",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.spwn"
        }
      },
      "name": "comment.block.spwn"
    },
    {
      "comment": "Line comments",
      "begin": "//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.spwn"
        }
      },
      "end": "$",
      "name": "comment.line.double-slash.spwn"
    },
    {
      "comment": "Interpreted string literals",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.spwn"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.spwn"
        }
      },
      "name": "string.quoted.double.spwn",
      "patterns": [{
          "include": "#string_escaped_char"
        },
        {
          "include": "#string_placeholder"
        }
      ]
    },



    {
      "match": "([0-9?]+)[gbci]",
      "name": "constant.numeric.spwn"
    },


    {
      "match": "[0-9]+(\\.[0-9]+)?",
      "name": "constant.numeric.spwn"
    },

    {
      "comment": "Functions",
      "match": "(([a-zA-Z_][a-zA-Z0-9_]*))(?=\\()",
      "name": "support.function.spwn"
    },

    {
      "comment": "Variables",
      "match": "\\bself\\b",
      "name": "variable.language.spwn"
    },

    {
      "comment": "Builtin",
      "match": "$",
      "name": "support.constant.spwn"
    },

    {
      "comment": "Types",
      "match": "@([a-zA-Z_][a-zA-Z0-9_]*)",
      "name": "support.type.spwn"
    },



    {
      "comment": "Language constants",
      "match": "\\b(true|false|null|trigger|obj)\\b",
      "name": "constant.language.spwn"
    },

    {
      "match": "let",
      "name": "storage.type.spwn"
    },


    {
      "comment": "Terminators",
      "match": ";",
      "name": "punctuation.terminator.spwn"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#delimiters"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "brackets": {
      "patterns": [{
          "match": "\\{|\\}",
          "name": "punctuation.other.bracket.curly.spwn"
        },
        {
          "match": "\\(|\\)",
          "name": "punctuation.other.bracket.round.spwn"
        },
        {
          "match": "\\[|\\]",
          "name": "punctuation.other.bracket.square.spwn"
        }
      ]
    },
    "delimiters": {
      "patterns": [{
          "match": ",",
          "name": "punctuation.other.comma.spwn"
        },
        {
          "match": "\\.(?!\\.)",
          "name": "punctuation.other.period.spwn"
        },
        {
          "match": ":",
          "name": "punctuation.other.colon.spwn"
        }
      ]
    },
    "keywords": {
      "patterns": [{
        "comment": "Flow control keywords",
        "match": "\\b(else|for|if|return|error|extract|in|type|import|impl|\\->|\\=>|break|continue|while|as)\\b",
        "name": "keyword.control.spwn"
      }]
    },
    "operators": {
      "comment": "Note that the order here is very important!",
      "patterns": [

        {
          "match": "(==|!=|<=|>=|<|>)",
          "name": "keyword.operator.comparison.spwn"
        },
        {
          "match": "(&&|\\|\\||!)",
          "name": "keyword.operator.logical.spwn"
        },
        {
          "match": "(=|\\+=|\\-=|\\*=|\/=)",
          "name": "keyword.operator.assignment.spwn"
        },
        {
          "match": "(\\+|\\-|\\*|\/|%|\\^)",
          "name": "keyword.operator.arithmetic.spwn"
        },
        {
          "match": "\\.\\.",
          "name": "keyword.operator.range.spwn"
        }
      ]
    },


    "string_escaped_char": {
      "patterns": [{
          "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
          "name": "constant.character.escape.spwn"
        },
        {
          "match": "\\\\[^0-7xuUabfnrtv\\'\"]",
          "name": "invalid.illegal.unknown-escape.spwn"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [{
        "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
        "name": "constant.other.placeholder.spwn"
      }]
    }

  }
}